class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        vector<string> output;
        for (int i = 0, j;i < words.size();) {
            int len = -1; // remove the first space
            for (j = i;j < words.size() && len + words[j].length() + 1 <= maxWidth;j++) {
                len += (words[j].length() + 1); // add the space and the word
            }
            string line = words[i++]; // get the first word
            int num_words = j - i; // number of words
            int num_space = maxWidth - len; // number of spaces (exclude the single space above)
            int extra = (num_words > 0) ? num_space%num_words : 0; // extra spaces
            for (;i < j;i++) {
                int space = (j == words.size()) ? 0 : // if last line, no space needed
                    (num_space/num_words + (extra-- > 0)); // else append average, then the extra
                line += string(space+1, ' ') + words[i];
            }
            line += string(maxWidth - line.length(), ' '); // add the remaining
            output.push_back(line);
        }
        return output;
    }
};
